/**
* @file SampleGenerated.cpp
*
* This file is normally generated by Python (devsure/rpc).
* It contains the C/C++ API implementations for the RPC.
* Generated from the Python class SampleGenerated.
* Located in devsure/devsure/rpc/test/test_rpc_generation.py.
*/

#include "SampleGenerated.h"

#include <thread>
#include <memory>
#include <iostream>
#include <string>
#include <stdexcept>

namespace{

//communication channels
std::shared_ptr<InterfaceChannelRPC> ccalls_fwaits;
std::shared_ptr<InterfaceChannelRPC> cwaits_fcalls;

} //namespace



// __________________________________________________________________________
// API Proxy bodies (forward to Test Platform (framework) via connection)
void framework_api1(){    
    uint16_t cpp_apiNumberForCallToOtherSide = 1;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Flush();
}

int8_t framework_api2(char c){    
    uint16_t cpp_apiNumberForCallToOtherSide = 2;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Put(c);    
    ccalls_fwaits->Flush();    
    int8_t cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

uint8_t framework_api3(){    
    uint16_t cpp_apiNumberForCallToOtherSide = 3;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Flush();    
    uint8_t cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

int16_t framework_api4(char c, int8_t i8, uint8_t u8, int16_t i16, uint16_t u16){    
    uint16_t cpp_apiNumberForCallToOtherSide = 4;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Put(c);    
    ccalls_fwaits->Put(i8);    
    ccalls_fwaits->Put(u8);    
    ccalls_fwaits->Put(i16);    
    ccalls_fwaits->Put(u16);    
    ccalls_fwaits->Flush();    
    int16_t cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

uint16_t framework_api5(){    
    uint16_t cpp_apiNumberForCallToOtherSide = 5;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Flush();    
    uint16_t cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

int32_t framework_api6(uint8_t u8, int16_t i16, int32_t i32, uint32_t u32){    
    uint16_t cpp_apiNumberForCallToOtherSide = 6;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Put(u8);    
    ccalls_fwaits->Put(i16);    
    ccalls_fwaits->Put(i32);    
    ccalls_fwaits->Put(u32);    
    ccalls_fwaits->Flush();    
    int32_t cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

uint32_t framework_api7(){    
    uint16_t cpp_apiNumberForCallToOtherSide = 7;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Flush();    
    uint32_t cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

int64_t framework_api8(int16_t i16, int32_t i32, int64_t i64, uint32_t u32){    
    uint16_t cpp_apiNumberForCallToOtherSide = 8;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Put(i16);    
    ccalls_fwaits->Put(i32);    
    ccalls_fwaits->Put(i64);    
    ccalls_fwaits->Put(u32);    
    ccalls_fwaits->Flush();    
    int64_t cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

uint64_t framework_api9(){    
    uint16_t cpp_apiNumberForCallToOtherSide = 9;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Flush();    
    uint64_t cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

float framework_api10(int64_t i64, uint64_t u64, float f){    
    uint16_t cpp_apiNumberForCallToOtherSide = 10;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Put(i64);    
    ccalls_fwaits->Put(u64);    
    ccalls_fwaits->Put(f);    
    ccalls_fwaits->Flush();    
    float cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

double framework_api11(){    
    uint16_t cpp_apiNumberForCallToOtherSide = 11;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Flush();    
    double cpp_obtained_result;    
    ccalls_fwaits->Get(cpp_obtained_result);    
    return cpp_obtained_result;
}

void framework_api12(char c, int8_t i8, uint8_t u8, int16_t i16, uint16_t u16, int32_t i32, uint32_t u32, int64_t i64, uint64_t u64, float f, double d, char s1[7]){    
    uint16_t cpp_apiNumberForCallToOtherSide = 12;    
    ccalls_fwaits->Put(cpp_apiNumberForCallToOtherSide);
    
    ccalls_fwaits->Put(c);    
    ccalls_fwaits->Put(i8);    
    ccalls_fwaits->Put(u8);    
    ccalls_fwaits->Put(i16);    
    ccalls_fwaits->Put(u16);    
    ccalls_fwaits->Put(i32);    
    ccalls_fwaits->Put(u32);    
    ccalls_fwaits->Put(i64);    
    ccalls_fwaits->Put(u64);    
    ccalls_fwaits->Put(f);    
    ccalls_fwaits->Put(d);    
    ccalls_fwaits->Put(s1, 7);    
    ccalls_fwaits->Flush();
}



// ==========================================================================
namespace{
/// Generated API for receiving calls
void receiveRemoteCalls(){
    try{
        //TODO: need to check declaration checksum here
        uint16_t cpp_apiNumberArrivedFromFramework;
        for( ;; ){
            cwaits_fcalls->Get(cpp_apiNumberArrivedFromFramework);
            switch(cpp_apiNumberArrivedFromFramework){
            // __________________________________________________________________________
            // Stub bodies (receive from framework and call C/C++ implementations)

case 1:{    
    cpp_api1();
    break;
}

case 2:{    
    char c;    

    
    cwaits_fcalls->Get(c);    
    auto cpp_obtained_result = cpp_api2(c);    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 3:{    
    auto cpp_obtained_result = cpp_api3();    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 4:{    
    char c;    
    int8_t i8;    
    uint8_t u8;    
    int16_t i16;    
    uint16_t u16;    

    
    cwaits_fcalls->Get(c);    
    cwaits_fcalls->Get(i8);    
    cwaits_fcalls->Get(u8);    
    cwaits_fcalls->Get(i16);    
    cwaits_fcalls->Get(u16);    
    auto cpp_obtained_result = cpp_api4(c, i8, u8, i16, u16);    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 5:{    
    auto cpp_obtained_result = cpp_api5();    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 6:{    
    uint8_t u8;    
    int16_t i16;    
    int32_t i32;    
    uint32_t u32;    

    
    cwaits_fcalls->Get(u8);    
    cwaits_fcalls->Get(i16);    
    cwaits_fcalls->Get(i32);    
    cwaits_fcalls->Get(u32);    
    auto cpp_obtained_result = cpp_api6(u8, i16, i32, u32);    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 7:{    
    auto cpp_obtained_result = cpp_api7();    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 8:{    
    int16_t i16;    
    int32_t i32;    
    int64_t i64;    
    uint32_t u32;    

    
    cwaits_fcalls->Get(i16);    
    cwaits_fcalls->Get(i32);    
    cwaits_fcalls->Get(i64);    
    cwaits_fcalls->Get(u32);    
    auto cpp_obtained_result = cpp_api8(i16, i32, i64, u32);    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 9:{    
    auto cpp_obtained_result = cpp_api9();    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 10:{    
    int64_t i64;    
    uint64_t u64;    
    float f;    

    
    cwaits_fcalls->Get(i64);    
    cwaits_fcalls->Get(u64);    
    cwaits_fcalls->Get(f);    
    auto cpp_obtained_result = cpp_api10(i64, u64, f);    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 11:{    
    auto cpp_obtained_result = cpp_api11();    
    cwaits_fcalls->Put(cpp_obtained_result);    
    cwaits_fcalls->Flush();
    break;
}

case 12:{    
    char c;    
    int8_t i8;    
    uint8_t u8;    
    int16_t i16;    
    uint16_t u16;    
    int32_t i32;    
    uint32_t u32;    
    int64_t i64;    
    uint64_t u64;    
    float f;    
    double d;    
    char s1[7];    

    
    cwaits_fcalls->Get(c);    
    cwaits_fcalls->Get(i8);    
    cwaits_fcalls->Get(u8);    
    cwaits_fcalls->Get(i16);    
    cwaits_fcalls->Get(u16);    
    cwaits_fcalls->Get(i32);    
    cwaits_fcalls->Get(u32);    
    cwaits_fcalls->Get(i64);    
    cwaits_fcalls->Get(u64);    
    cwaits_fcalls->Get(f);    
    cwaits_fcalls->Get(d);    
    cwaits_fcalls->Get(s1);    
    cpp_api12(c, i8, u8, i16, u16, i32, u32, i64, u64, f, d, s1);
    break;
}



                default:{
                    //unknown API number
                    throw std::runtime_error("Unknown API number: "+std::to_string(cpp_apiNumberArrivedFromFramework));
                    return;
                } // default
            } // switch
        } // for
    }catch(const std::exception& e){
        std::cerr << "Exception in receiveRemoteCalls: " << e.what() << std::endl;
    }catch(...){
        std::cerr << "Unknown exception in receiveRemoteCalls" << std::endl;
    }
} // receiveRemoteCalls

} // namespace            
// ==========================================================================

// __________________________________________________________________________
// Serialization implementations

// __________________________________________________________________________
// Deserialization implementations


// ==========================================================================
/// Setup actual RPC communication (called by Emulator startup code)
void SetupRPC_SampleGenerated(
    const std::shared_ptr<InterfaceChannelRPC>& ccalls_fwaits_toUse,
    const std::shared_ptr<InterfaceChannelRPC>& cwaits_fcalls_toUse,
    bool runAsynchronously
){
    ccalls_fwaits = ccalls_fwaits_toUse;
    cwaits_fcalls = cwaits_fcalls_toUse;

    if( runAsynchronously ){
        //Start the thread that will receive calls
        std::thread(receiveRemoteCalls).detach();
    }
    else{
        //Receive calls synchronously
        receiveRemoteCalls();
    }
}
